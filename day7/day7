# üöÄ Weekly DSA Series 2 - Day 7  

Today I practiced **LeetCode problems** focused on **String and Array** topics in C++.

## üî¢ Problems Solved
| Problem No. | Problem Name | Topic | Difficulty | Solution |
|--------------|---------------|--------|-------------|-----------|
| [1662](https://leetcode.com/problems/check-if-two-string-arrays-are-equivalent/) | Check If Two String Arrays are Equivalent | String | Easy | [View Code](./Problem_1662_ArrayStringsAreEqual.cpp) |
| [2108](https://leetcode.com/problems/find-first-palindromic-string-in-the-array/) | Find First Palindromic String in the Array | String | Easy | [View Code](./Problem_2108_FirstPalindromicString.cpp) |
| [268](https://leetcode.com/problems/missing-number/) | Missing Number | Array | Easy | [View Code](./Problem_268_MissingNumber.cpp) |
| [204](https://leetcode.com/problems/count-primes/) | Count Primes | Math / Sieve | Medium | [View Code](./Problem_204_CountPrimes.cpp) |

---

## üß† Learnings
- Practiced string traversal and comparison in C++  
- Understood palindrome checking and character iteration  
- Revised XOR and mathematical methods for missing numbers  
- Implemented the Sieve of Eratosthenes for prime counting  

---

## üñ•Ô∏è Language Used
C++

---

#1662
        class Solution {
public:
    bool arrayStringsAreEqual(vector<string>& word1, vector<string>& word2) {
       string s1="";
       string s2="";
       for(string w:word1) s1+=w;
          for(string w:word2) s2+=w;
       
        return s1==s2;
    }
};

#2108
        class Solution {
public:
bool ispalindrome(string s){
    int i=0,j=s.size()-1;
    while(i<j){
        if(s[i]!=s[j]){
            return false;}
            
            i++;
            j--;
        
    }
    return true;
}
    string firstPalindrome(vector<string>& words) {
       for(string s:words){
        if(ispalindrome(s)){
            return s;
        
        }
       }
        return "";
    }
};
 #268
        class Solution {
public:
    int missingNumber(vector<int>& arr) {
     sort(arr.begin(),arr.end());
        int n=arr.size();
        for(int i=0;i<n;i++){
            if(arr[i]!=i){
                return i;

            }
            
        }
   return n;
    }
};
#204
        class Solution {
public:
    int countPrimes(int n) {
        vector<bool> isprime(n+1,true);
    int count=0;
    for(int i=2;i<n;i++){
        if(isprime[i]) count++;
        for(int j=i*2;j<n;j=j+i){
           isprime[j]=false;
                   }
    }
return count;
        
    }
};
